///Better solution
vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target) 
    {
        Node* temp=head;
        unordered_map<int,int>mp;
        int diff;
        vector<pair<int,int>>v;
        while(temp){
            diff=target-temp->data;
            if(mp.find(diff)!=mp.end())
            {
                v.push_back({diff,temp->data});
            }
            else mp[temp->data]++;
            temp=temp->next;
            
        }
        reverse(v.begin(),v.end());
        return v;
    }


///Better solution
vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
       Node* temp1=head;
       Node* temp2;
       vector<pair<int,int>>ans;
       while(temp1!=NULL)
       {
           temp2=temp1->next;
           while(temp2!=NULL && temp1->data+temp2->data<=target)
           {
               if(temp1->data+temp2->data==target)
               {
                   ans.push_back({temp1->data,temp2->data});
               }
               temp2=temp2->next;
               
           }
           temp1=temp1->next;
       }
       return ans;





////Optimal solution
 Node* findTail(Node* head)
    {
        Node* tail=head;
        while(tail->next!=NULL)
        {
            tail=tail->next;
        }
        return tail;
    }    
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
       Node* left=head;
       Node* right=findTail(head);
       vector<pair<int,int>>ans;
       while(left->data<right->data)
       {
           if(left->data+right->data==target)
           {
               ans.push_back({left->data,right->data});
               left=left->next;
               right=right->prev;
           }
           else if(left->data+right->data<target) left=left->next;
           else right=right->prev;
       }
       return ans;
    }
